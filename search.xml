<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git</title>
    <url>/2020/11/10/Git/</url>
    <content><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><ul>
<li>cd：改变目录</li>
<li>pwd ：显示当前所在目录路径</li>
<li>ls：列出当前目录中的所有文件</li>
<li>touch：新建一个文件</li>
<li>rm：删除一个文件</li>
<li>mkdir：新建一个目录</li>
<li>rm -r：删除一个文件夹</li>
<li>mv：移动文件</li>
<li>reset：重新初始化终端、清屏</li>
<li>clean：清屏</li>
<li>history：查看命令历史</li>
<li>help：帮助</li>
<li>exit：退出</li>
<li>#：表示注释</li>
</ul>
<h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><ul>
<li>查看状态：git status</li>
<li>初始化：git init</li>
<li>克隆：git clone</li>
<li>添加到暂存、跟踪：git add<ul>
<li>全部：git add .  </li>
</ul>
</li>
<li>提交暂存区的内容：git commit<ul>
<li>git commit -m “消息内容”  </li>
</ul>
</li>
</ul>
<h2 id="Git-忽略部分文件"><a href="#Git-忽略部分文件" class="headerlink" title="Git 忽略部分文件"></a>Git 忽略部分文件</h2><h2 id="代码仓库的SSH公钥"><a href="#代码仓库的SSH公钥" class="headerlink" title="代码仓库的SSH公钥"></a>代码仓库的SSH公钥</h2><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2>]]></content>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/11/10/Spring/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="工厂IOC"><a href="#工厂IOC" class="headerlink" title="工厂IOC"></a>工厂IOC</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件applicationContext"><a href="#配置文件applicationContext" class="headerlink" title="配置文件applicationContext"></a>配置文件applicationContext</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- other &lt;bean/&gt; definitions here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="启动工厂"><a href="#启动工厂" class="headerlink" title="启动工厂"></a>启动工厂</h3><blockquote>
<p><strong>工厂接口</strong>：ApplicationContext</p>
<p><strong>实现类</strong>：ClassPathXmlApplicationContext</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  声明，哪些组件需要生产  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  当spring启动时，读取该配置文件，创建对应的类的对象，并用id作标识  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.dao.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.service.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂启动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">factoryBoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//启动工厂</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext"</span>);</span><br><span class="line">    <span class="comment">//从工厂中获取 组件</span></span><br><span class="line">    UserDAO userDAO = (UserDAO) context.getBean(<span class="string">"userDAO04"</span>);</span><br><span class="line">    UserDAO userDAO2 = context.getBean(<span class="string">"userDAO04"</span>, UserDAO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    userDAO.insertUser(<span class="keyword">new</span> User());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="组件的稳健度-解决强耦合"><a href="#组件的稳健度-解决强耦合" class="headerlink" title="组件的稳健度  解决强耦合"></a>组件的稳健度  解决强耦合</h4><p>配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDAO04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.dao.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  Spring生产该对象</span></span><br><span class="line"><span class="comment">            对象中有一个属性需要赋值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   给属性 userDAO 赋值</span></span><br><span class="line"><span class="comment">        值：id=“userDAO04”的组件</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDAO"</span> <span class="attr">ref</span>=<span class="string">"userDAO04"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">//    private UserDAO userDAO = new UserDAOImpl();</span></span><br><span class="line">	<span class="comment">//去掉强耦合，留下接口</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDAO <span class="title">getUserDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDAO</span><span class="params">(UserDAO userDAO)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set DAO for Service"</span>);</span><br><span class="line">        <span class="keyword">this</span>.userDAO = userDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"insert user in Service"</span>);</span><br><span class="line">        userDAO.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext"</span>);<span class="comment">//根据配置文件路径获取一个工厂</span></span><br><span class="line">UserService userService04 = context.getBean(<span class="string">"userService04"</span>, UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      userService04.insertUser(<span class="keyword">new</span> User());</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set DAO for Service</span><br><span class="line">insert user in Service</span><br><span class="line">com.lmt.dao.UserDAOImpl@1e7c7811</span><br><span class="line">insert user in DAO</span><br></pre></td></tr></table></figure>

<h3 id="控制反转IOC"><a href="#控制反转IOC" class="headerlink" title="控制反转IOC"></a>控制反转IOC</h3><ul>
<li>之前的自己创建的依赖对象，变为由工厂推送（即变主动为被动）</li>
<li>解决了具有依赖关系的组件之间的强耦合，使得项目形态更加稳健</li>
</ul>
<h3 id="依赖注入DI"><a href="#依赖注入DI" class="headerlink" title="依赖注入DI"></a>依赖注入DI</h3><ul>
<li>全新的依赖满足方式，体现在编码中就是去哪新的赋值方式 -&gt; 在工厂中为属性推送值</li>
</ul>
<h3 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h3><ul>
<li>IOC和DI是一码事</li>
<li>IOC是思想</li>
<li>DI是手段</li>
</ul>
<h3 id="DI的方式"><a href="#DI的方式" class="headerlink" title="DI的方式"></a>DI的方式</h3><ul>
<li>set注入</li>
<li>构造注入（了解）</li>
<li>自动注入</li>
</ul>
<blockquote>
<p>set注入可以和构造注入一起使用</p>
</blockquote>
<h4 id="set注入"><a href="#set注入" class="headerlink" title="set注入"></a>set注入</h4><ul>
<li>需要set方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//整形</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//字符串</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//布尔</span></span><br><span class="line">    <span class="keyword">private</span> Boolean gender;</span><br><span class="line">    <span class="comment">//对象</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    <span class="comment">//集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list04;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set04;</span><br><span class="line">    <span class="comment">//Map</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map04;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> Properties props04;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Boolean gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDAO <span class="title">getUserDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDAO</span><span class="params">(UserDAO userDAO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDAO = userDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list04;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList04</span><span class="params">(List&lt;Object&gt; list04)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list04 = list04;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSet04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> set04;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet04</span><span class="params">(Set&lt;String&gt; set04)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set04 = set04;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map04;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap04</span><span class="params">(Map&lt;String, Object&gt; map04)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map04 = map04;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getProps04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> props04;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProps04</span><span class="params">(Properties props04)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.props04 = props04;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--  注入测试  --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"di04"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.lmt.di.SetComponent"</span>&gt;</span><br><span class="line">        &lt;!--    简单类型 基本类型+String    --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"id"</span> value=<span class="string">"4"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"name"</span> value=<span class="string">"zhangsan"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"gender"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">        &lt;!--引用类型--&gt;</span><br><span class="line">        &lt;property name=<span class="string">"userDAO"</span> ref=<span class="string">"userDAO04_2"</span>/&gt;</span><br><span class="line">        &lt;!--List--&gt;</span><br><span class="line">        &lt;property name=<span class="string">"list04"</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;gp04&lt;/value&gt;</span><br><span class="line">                &lt;ref bean=<span class="string">"userDAO04_2"</span>/&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--Set     --&gt;</span><br><span class="line">        &lt;property name=<span class="string">"set04"</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;value&gt;zhangsan&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;zhangsan&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;zhangsan&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;lisi&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;lisi&lt;/value&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--Map--&gt;</span><br><span class="line">        &lt;property name=<span class="string">"map04"</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=<span class="string">"username"</span> value=<span class="string">"suxing"</span>/&gt;</span><br><span class="line">                &lt;entry key=<span class="string">"ud04"</span> value-ref=<span class="string">"userDAO04_2"</span>/&gt;</span><br><span class="line">                &lt;!--&lt;entry key=<span class="string">"list04"</span>&gt;</span><br><span class="line">                    &lt;list&gt;&lt;/list&gt;</span><br><span class="line">                &lt;/entry&gt;--&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!--Properties--&gt;</span><br><span class="line">        &lt;property name=<span class="string">"props04"</span>&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key=<span class="string">"url"</span>&gt;jdbc:mysql<span class="comment">//xxxxx&lt;/prop&gt;</span></span><br><span class="line">                &lt;prop key="driver"&gt;com.mysql.jdbc.Driver&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><ul>
<li>根据传入参数顺序选择构造器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDi2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext"</span>);</span><br><span class="line">       ConsComponent di04 = context.getBean(<span class="string">"consDI04"</span>, ConsComponent<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       System.out.println(<span class="string">"================================="</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Boolean gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsComponent</span><span class="params">(Integer id, String name, Boolean gender)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造1"</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsComponent</span><span class="params">(Integer id, String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造2"</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsComponent</span><span class="params">(Boolean gender,Integer id, String name )</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造3"</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"consDI04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.di.ConsComponent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">type</span>=<span class="string">"java.lang.Boolean"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span> <span class="attr">value</span>=<span class="string">"wanger"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造3</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>

<h4 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h4><blockquote>
<p>掌握  byType  和  byType  概念区别即可</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动注入</span></span><br><span class="line"><span class="comment">        autowire = 自动装载</span></span><br><span class="line"><span class="comment">        byType = 将工厂中和属性类型一致的组件，赋值给对应属性</span></span><br><span class="line"><span class="comment">        byType = 将工厂中和属性名称一致的组件，组织给对应属性</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"autoDI04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.di.AutoComponent"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDi3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext"</span>);</span><br><span class="line">        <span class="comment">// AutoComponent di04 = context.getBean("autoDI04", AutoComponent.class);</span></span><br><span class="line">        System.out.println(<span class="string">"================================="</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Bean细节"><a href="#Bean细节" class="headerlink" title="Bean细节"></a>Bean细节</h3><h4 id="Bean创建细节"><a href="#Bean创建细节" class="headerlink" title="Bean创建细节"></a>Bean创建细节</h4><ul>
<li>反射，加载类对象，默认调用无参构造，创建对象</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;xx.xx.xxx.XXX&quot; id&#x3D;&quot;xxx&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;反射</span><br><span class="line">String classpath &#x3D; &quot;com.lmt.domain.User&quot;</span><br><span class="line">Class user &#x3D; Class.forName(classpath);</span><br><span class="line">Constructor constructor &#x3D; user .getConstructor();</span><br><span class="line">User o &#x3D; (User)constructor.newInstance();</span><br></pre></td></tr></table></figure>

<h4 id="Bean创建模式"><a href="#Bean创建模式" class="headerlink" title="Bean创建模式"></a>Bean创建模式</h4><blockquote>
<ul>
<li>singleton：<strong>单例 -&gt;</strong> <strong>==默认==</strong><ul>
<li><strong>在同一个spring工厂中，一个bean只会创建一次对象</strong></li>
<li><strong>多次getBean，或多次注入使用的是同一个对象</strong></li>
<li><strong>随工厂创建而创建，随工厂关闭而销毁</strong></li>
</ul>
</li>
<li>prototype：<strong>多例（原型）</strong><ul>
<li><bean id = xxx class = xxx scope = "prototype"></li>
<li><strong>每次getBean（），或者注入都会重新创建对象</strong></li>
<li><strong>不随工厂创建而创建，不随工厂关闭而销毁</strong></li>
<li><strong>被用到时才会创建对象</strong></li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>对象的状态：对象的成员变量值 即对象的状态</strong><ul>
<li>无状态：不同的用户，不同的请求，对象的属性值不会发生改变</li>
<li>有状态：不同的用户，不同的请求，对象的属性值会发生改变</li>
</ul>
</li>
<li><strong>有状态对象：多例模式</strong></li>
<li><strong>无状态对象：单例模式</strong></li>
</ul>
</blockquote>
<h3 id="工厂Bean（重点）"><a href="#工厂Bean（重点）" class="headerlink" title="工厂Bean（重点）"></a>工厂Bean（重点）</h3><ul>
<li>FactoryBean：生产某一类对象</li>
<li>在工厂中有些bean，无法通过简单的<bean></bean>生产<ul>
<li>比如：Connection，SqlSessionFactory</li>
</ul>
</li>
<li>FactoryBean：spring工厂中一种特殊的bean，可以生产对象，spring工厂中的小作坊</li>
</ul>
<h4 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--工厂Bean</span></span><br><span class="line"><span class="comment">        细节： 1.&gt; FactoryBean的生命周期和常规的Bean没区别</span></span><br><span class="line"><span class="comment">              2.&gt; 当用户通过getBean获取一个FactoryBean时，返回的并不是工厂Bean本身，而是其创建生产的对象</span></span><br><span class="line"><span class="comment">              3.&gt; 如果想获得工厂bean本身，需要"&amp;beanID"=="&amp;mySqlSessionFactory"</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"com.lmt.factorybean.MySqlSessionFactoryBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂Bean，生产SqlSessionFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSessionFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">SqlSessionFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主体逻辑，完成某种复杂对象的生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//构建过程</span></span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"configuration"</span>);<span class="comment">//配置文件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回 某种复杂对象的 类对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> SqlSessionFactory<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//控制复杂对象的创建模式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--工厂Bean：静态工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySqlSessionFactory2"</span> <span class="attr">class</span>=<span class="string">"com.lmt.factorybean.MySqlSessionFactoryBean2"</span> <span class="attr">factory-method</span>=<span class="string">"buildSqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlSessionFactoryBean2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">buildSqlSessionFactory</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"configuration"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>				 <span class="comment">//get set toString equals canEqual hashCode 方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  <span class="comment">//全参构造</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>   <span class="comment">//无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="修改骨架"><a href="#修改骨架" class="headerlink" title="修改骨架"></a>修改骨架</h3><ol>
<li>找到自己的本地仓库 - org - apache - maven - apchetypes</li>
<li>已经用过的骨架全在这个文件夹下</li>
<li>找到里面的  jar包，不要解压，直接打开</li>
<li>找到里面的  pom.xml  即可修改骨架</li>
<li>保存修改即可</li>
</ol>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><ul>
<li>面向切面编程，一种编程思想</li>
<li>切面：Aspect，由<strong>切入点</strong>和<strong>额外功能（增强）</strong>组成</li>
<li>提供了新的编程角度，不再只是考虑<strong>类/对象</strong>，而可以考虑<strong>切面</strong>。切面和目标形成<strong>代理</strong>，解决项目业务中额外功能冗余的问题。</li>
</ul>
<h3 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aspects --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryOne</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("额外功能");</span></span><br><span class="line">        System.out.println(<span class="string">"核心功能 in insert User"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryOne</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("额外功能");</span></span><br><span class="line">        System.out.println(<span class="string">"核心功能 in query User"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代替UserServiceImpl 打理 额外功能</span></span><br><span class="line"><span class="comment"> * 静态代理类</span></span><br><span class="line"><span class="comment"> * 1.要和目标保持功能一致：和目标保持同一套接口</span></span><br><span class="line"><span class="comment"> * 2.组成：目标+额外功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//原始业务</span></span><br><span class="line">    <span class="keyword">private</span>  UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"额外功能"</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.insertUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryOne</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"额外功能"</span>);</span><br><span class="line">        <span class="keyword">return</span> userService.queryOne(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul>
<li>jdk代理：通过和目标实现相同的接口保证功能一致</li>
<li>cglib代理：通过继承目标保证功能一致</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--目标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.lmt.service.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService2"</span> <span class="attr">class</span>=<span class="string">"com.lmt.service.UserServiceImpl2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--额外功能：Advice--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"before04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.advice.MyBeforeAdvice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编制</span></span><br><span class="line"><span class="comment">        通过目标的信息，额外功能的信息，组建一个新的类：Proxy</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    切入点：目标中方法</span></span><br><span class="line"><span class="comment">            execution表达式</span></span><br><span class="line"><span class="comment">            execution(修饰符   返回值 包.类.方法名（参数表）)</span></span><br><span class="line"><span class="comment">            execution(         *     com.lmt.service.*.*(..))</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc04"</span> <span class="attr">expression</span>=<span class="string">"execution( * com.lmt.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc05"</span> <span class="attr">expression</span>=<span class="string">"execution( * com.lmt.service.UserServiceImpl.queryOne(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc06"</span> <span class="attr">expression</span>=<span class="string">"execution( * com.lmt.service.UserServiceImpl2.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将某个额外功能，编制到某些切入点中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before04"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc05"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before04"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc06"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldAnswerWithTrue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext"</span>);</span><br><span class="line">        <span class="comment">//获取代理对象，通过目标BeanID，即可获得</span></span><br><span class="line">        UserService userServiceProxy = (UserService) context.getBean(<span class="string">"userService2"</span>);</span><br><span class="line">        userServiceProxy.queryOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        userServiceProxy.insertUser(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl2</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("额外功能");</span></span><br><span class="line">        System.out.println(<span class="string">"核心功能 in insert User222222"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryOne</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("额外功能");</span></span><br><span class="line">        System.out.println(<span class="string">"核心功能 in query User222222222"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="前置额外功能"><a href="#前置额外功能" class="headerlink" title="前置额外功能"></a>前置额外功能</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前置额外功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主体逻辑，在核心功能之前执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method    当前执行的方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects   方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o          目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Before~~~</span><br><span class="line">核心功能 in query User222222222</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">Before~~~</span><br><span class="line">核心功能 in insert User222222</span><br></pre></td></tr></table></figure>

<h4 id="后置额外功能"><a href="#后置额外功能" class="headerlink" title="后置额外功能"></a>后置额外功能</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAfterAdvice</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在核心功能返回之后执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o         核心功能的返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method     方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects   方法的参数表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o1        目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">核心功能 in query User222222222</span><br><span class="line">After~~~</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">核心功能 in insert User222222</span><br><span class="line">After~~~</span><br></pre></td></tr></table></figure>

<h4 id="环绕额外功能"><a href="#环绕额外功能" class="headerlink" title="环绕额外功能"></a>环绕额外功能</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环绕额外功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodInvocation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation methodInvocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">        <span class="comment">//接受业务执行结果</span></span><br><span class="line">        Object ret = methodInvocation.proceed();<span class="comment">//执行目标功能 核心功能</span></span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">        <span class="comment">//业务结果 向上返回</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">环绕前</span><br><span class="line">核心功能 in query User222222222</span><br><span class="line">环绕后</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">环绕前</span><br><span class="line">核心功能 in insert User222222</span><br><span class="line">环绕后</span><br></pre></td></tr></table></figure>

<h4 id="一起用顺序"><a href="#一起用顺序" class="headerlink" title="一起用顺序"></a>一起用顺序</h4><ul>
<li>前置</li>
<li>环绕前</li>
<li>核心功能</li>
<li>环绕后</li>
<li>后置</li>
</ul>
<blockquote>
<p>建议：需要哪个写哪个，不要其他的代替</p>
<p>​    如：用环绕代替前，用前后代替环绕</p>
</blockquote>
<h4 id="异常时额外功能（了解）"><a href="#异常时额外功能（了解）" class="headerlink" title="异常时额外功能（了解）"></a>异常时额外功能（了解）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryOne</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println("额外功能");</span></span><br><span class="line">        System.out.println(<span class="string">"核心功能 in query User222222222"</span>);</span><br><span class="line">        <span class="keyword">int</span> a= <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常时额外功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThrows</span> <span class="keyword">implements</span> <span class="title">ThrowsAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当核心功能异常时执行,ex = 异常对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"出现异常啦~~~~~~~"</span>);</span><br><span class="line">        System.out.println(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">环绕前</span><br><span class="line">核心功能 in query User222222222</span><br><span class="line">出现异常啦~~~~~~~</span><br><span class="line">&#x2F; by zero</span><br></pre></td></tr></table></figure>

<h4 id="最终额外功能（了解）"><a href="#最终额外功能（了解）" class="headerlink" title="最终额外功能（了解）"></a>最终额外功能（了解）</h4><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><h4 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution(修饰符   返回值 包.类.方法名（参数表）)</span><br></pre></td></tr></table></figure>

<ol>
<li><pre><code>* com.service.UserServiceImpl.queryUser(..)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   修饰符：任意</span><br><span class="line"></span><br><span class="line">   返回值：任意</span><br><span class="line"></span><br><span class="line">   包：com.service</span><br><span class="line"></span><br><span class="line">   类：UserServiceImpl</span><br><span class="line"></span><br><span class="line">   方法：queryUser</span><br><span class="line"></span><br><span class="line">   参数表：任意</span><br><span class="line"></span><br><span class="line">2.</span><br></pre></td></tr></table></figure>
* com.service.UserServiceImpl.*(..)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   修饰符：任意</span><br><span class="line"></span><br><span class="line">   返回值：任意</span><br><span class="line"></span><br><span class="line">   包：com.service</span><br><span class="line"></span><br><span class="line">   类：UserServiceImpl</span><br><span class="line"></span><br><span class="line">   方法：所有，任意</span><br><span class="line"></span><br><span class="line">   参数表：任意</span><br><span class="line"></span><br><span class="line">3.</span><br></pre></td></tr></table></figure>
* com..UserServiceImpl.*(..)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   修饰符：任意</span><br><span class="line"></span><br><span class="line">   返回值：任意</span><br><span class="line"></span><br><span class="line">   包：com包，及其子包</span><br><span class="line"></span><br><span class="line">   类：UserServiceImpl</span><br><span class="line"></span><br><span class="line">   方法：所有，任意</span><br><span class="line"></span><br><span class="line">   参数表：任意</span><br><span class="line"></span><br><span class="line">4.</span><br></pre></td></tr></table></figure>
* com.service.*.*(..)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   修饰符：任意</span><br><span class="line"></span><br><span class="line">   返回值：任意</span><br><span class="line"></span><br><span class="line">   包：com.service包</span><br><span class="line"></span><br><span class="line">   类：所有，任意</span><br><span class="line"></span><br><span class="line">   方法：所有，任意</span><br><span class="line"></span><br><span class="line">   参数表：任意</span><br><span class="line"></span><br><span class="line">5.</span><br></pre></td></tr></table></figure>
* *(..)   不建议
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   修饰符：任意</span><br><span class="line"></span><br><span class="line">   返回值：任意</span><br><span class="line"></span><br><span class="line">   包：任意</span><br><span class="line"></span><br><span class="line">   类：所有，任意</span><br><span class="line"></span><br><span class="line">   方法：所有，任意</span><br><span class="line"></span><br><span class="line">   参数表：任意</span><br><span class="line"></span><br><span class="line">6.</span><br></pre></td></tr></table></figure>
* com.service.UserServiceImpl.query*(..)    批量切入技巧
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   修饰符：任意</span><br><span class="line"></span><br><span class="line">   返回值：任意</span><br><span class="line"></span><br><span class="line">   包：com.service</span><br><span class="line"></span><br><span class="line">   类：UserServiceImpl</span><br><span class="line"></span><br><span class="line">   方法：所有，任意</span><br><span class="line"></span><br><span class="line">   参数表：任意</span><br><span class="line"></span><br><span class="line">   **注意：尽量精确，避免不必要的切入**</span><br><span class="line"></span><br><span class="line">#### within</span><br><span class="line"></span><br><span class="line">&gt;描述 **包** 和 **类** ，**类** 中所有的方法都切入</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">within(com.service.UserServiceImpl) 类中所有的方法</span><br><span class="line">within(com..UserServiceImpl) com包和com子包下的类中的所有方法</span><br><span class="line"></span><br><span class="line">&lt;aop:pointcut id&#x3D;&quot;pc&quot; expression&#x3D;&quot;within(com..UserServiceImpl)&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ol>
<h4 id="args"><a href="#args" class="headerlink" title="args"></a>args</h4><blockquote>
<p>描述 <strong>参数表</strong> ，符合的方法都切入</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">args(int,String,com.lmt.pojo.User)  参数表如此的方法</span><br><span class="line">       </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc07"</span> <span class="attr">expression</span>=<span class="string">"args(int,String,com.lmt.pojo.User)"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="联用"><a href="#联用" class="headerlink" title="联用"></a>联用</h4><blockquote>
<p>不同种类的表达式之间，可以使用逻辑运算：</p>
<p><strong>and    or    not</strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"within(com..UserServiceImpl) and args(int,String,com.lmt.pojo.User)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"within(com..UserServiceImpl) and not args(int,String,com.lmt.pojo.User)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc"</span> <span class="attr">expression</span>=<span class="string">"execution( * com.lmt.service.UserServiceImpl2.*(..)) and args(int,String,com.lmt.pojo.User)"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="AOP细节"><a href="#AOP细节" class="headerlink" title="AOP细节"></a>AOP细节</h3><h4 id="周期"><a href="#周期" class="headerlink" title="周期"></a>周期</h4><blockquote>
<p><strong><code>构造</code> - &gt;  <code>注入属性 满足依赖</code> - &gt; <code>初始化</code> - &gt; <code>返回</code> - &gt; <code>销毁</code></strong></p>
<p><strong>完整周期</strong></p>
<p><strong><code>构造</code> - &gt;  <code>注入属性 满足依赖</code> - &gt; <code>后置处理器前置过程</code> - &gt; <code>初始化</code> - &gt; <code>后置处理器后置过程</code> - &gt;<code>返回</code> - &gt; <code>销毁</code></strong></p>
</blockquote>
<ul>
<li>后处理器，对工厂中所有bean 声明周期进行干预</li>
</ul>
<h3 id="cglib选择"><a href="#cglib选择" class="headerlink" title="cglib选择"></a>cglib选择</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span>  强制使用<span class="attr">cglib</span>代理  <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="切入顺序"><a href="#切入顺序" class="headerlink" title="切入顺序"></a>切入顺序</h4><p>当一个对象，需要两个或这多个前置时</p>
<ul>
<li>默认按照配置文件的声明顺序，默认先执行  before01</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before01"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc04"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before02"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc04"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以用  order  属性表明顺序,此时  before02  先执行，order  越小，越优先</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before01"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc04"</span> <span class="attr">order</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"before02"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc04"</span> <span class="attr">order</span>=<span class="string">"1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring-Mybatis整合"><a href="#Spring-Mybatis整合" class="headerlink" title="Spring-Mybatis整合"></a>Spring-Mybatis整合</h2><h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><h4 id="依赖-2"><a href="#依赖-2" class="headerlink" title="依赖"></a>依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="spring-组件"><a href="#spring-组件" class="headerlink" title="spring 组件"></a>spring 组件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--DAO--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">id</span>=<span class="string">"dbcp04"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost/testmybatis?serverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--SqlSessionFactory</span></span><br><span class="line"><span class="comment">       配置：1.连接池</span></span><br><span class="line"><span class="comment">             2.mapper文件信息</span></span><br><span class="line"><span class="comment">             3.别名-可选</span></span><br><span class="line"><span class="comment">             4.插件-可选</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory04"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dbcp04"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mapper文件</span></span><br><span class="line"><span class="comment">           如果和dao接口文件在同包且同名,则如下注入可以省略</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/lmt/dao/*.xml"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--别名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.lmt.domain"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--插件--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;property name="plugins"&gt;</span></span><br><span class="line"><span class="comment">           &lt;array&gt;</span></span><br><span class="line"><span class="comment">               &lt;bean class="com.github.pagehelper.PageInterceptor"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">           &lt;/array&gt;</span></span><br><span class="line"><span class="comment">       &lt;/property&gt;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--扫描所有mapper，为每个dao定制实现类</span></span><br><span class="line"><span class="comment">       DAO实现的对象会纳入工厂，并且beanID=DAO的首字母小写接口类名=“studentDAO”</span></span><br><span class="line"><span class="comment">       1.DAO接口</span></span><br><span class="line"><span class="comment">       2.DAO映射文件</span></span><br><span class="line"><span class="comment">       3.SqlSession</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--如果当前工厂中，只有一个SqlSessionFactory,则此项注入可以省略--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory04"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--DAO接口位置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.lmt.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Service--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"studentService04"</span> <span class="attr">class</span>=<span class="string">"com.lmt.service.StudentServiceImpl"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"studentDao"</span> <span class="attr">ref</span>=<span class="string">"studentDao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--事务处理--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tx"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dbcp04"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--事务管理的 额外功能</span></span><br><span class="line"><span class="comment">       事务管理的实现由“tx”提供</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">transaction-manager</span>=<span class="string">"tx"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--name为可能切入事务的方法--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"queryStudent"</span>/&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               isolation:隔离级别</span></span><br><span class="line"><span class="comment">               propagation:传播性</span></span><br><span class="line"><span class="comment">                   support:如果已有事务，则融入这个事务，如果没有事务，则以非事务环境运行</span></span><br><span class="line"><span class="comment">                   required:如果已有事务，则融入这个事务，如果没有事务，开启自己的事务（默认值）</span></span><br><span class="line"><span class="comment">               read-only:读写性</span></span><br><span class="line"><span class="comment">                   true:只读事务，事务中只出现查询行为</span></span><br><span class="line"><span class="comment">                   false:读写事务，事务中可以出现curd行为（默认值）</span></span><br><span class="line"><span class="comment">               rollback-for:回滚</span></span><br><span class="line"><span class="comment">           --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"queryStudentById"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- * 剩余所有--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--编织--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc_tx"</span> <span class="attr">expression</span>=<span class="string">"execution(* com..StudentServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txManager"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc_tx"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="更新丢失"><a href="#更新丢失" class="headerlink" title="更新丢失"></a>更新丢失</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><ul>
<li>for update</li>
</ul>
<h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><ul>
<li>version 版本号</li>
</ul>
<h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"druid04"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost/testmybatis?serverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="注解的扫描"><a href="#注解的扫描" class="headerlink" title="注解的扫描"></a>注解的扫描</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置注解扫描，让spring去发现注解，进而实现对应的功能--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.lmt"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--支持@Transactional实现事务--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"tx"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="部分bean可以省略"><a href="#部分bean可以省略" class="headerlink" title="部分bean可以省略"></a>部分bean可以省略</h4><blockquote>
<p><strong>@Service 业务类专用</strong></p>
<ul>
<li>相当于&lt;bean class=”当前类” id=”首字母小写类名”</li>
<li>也可以自定义id，@Service(“id名”)</li>
</ul>
<p><strong>@Repository dao实现类专用</strong></p>
<p><strong>@Controller web层专用</strong></p>
<p><strong>@Component 通用</strong></p>
<p><strong>@Scope 用户控制bean的创建模式</strong></p>
</blockquote>
<h4 id="更便捷的注入方式"><a href="#更便捷的注入方式" class="headerlink" title="更便捷的注入方式"></a>更便捷的注入方式</h4><blockquote>
<ul>
<li>基于注解不需要get和set方法</li>
</ul>
<p><strong>@Autowired 基于类型自动注入</strong></p>
<p><strong>@Resource 基于名称自动注入</strong></p>
</blockquote>
<h4 id="工厂配置中的-lt-tx-advice…和-lt-aop-config…可以省略"><a href="#工厂配置中的-lt-tx-advice…和-lt-aop-config…可以省略" class="headerlink" title="工厂配置中的&lt;tx:advice…和&lt;aop:config…可以省略"></a>工厂配置中的&lt;tx:advice…和&lt;aop:config…可以省略</h4><blockquote>
<p><strong>@Transactional 用于为业务中切入事务</strong></p>
<ul>
<li>当前类中的所有方法都切入事务</li>
<li>添加属性@Transactional (isolation = Isolation.DEFAULT,…)</li>
<li>如果方法中加入注解，则按方法中的注解属性</li>
</ul>
</blockquote>
<h3 id="AspectJ"><a href="#AspectJ" class="headerlink" title="@AspectJ"></a>@AspectJ</h3><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a>注解</h4><blockquote>
<p>@Aspect 声明当前组件为一个切面组件</p>
<p>@Component 声明当前组件</p>
<p>@Pointcut 定义切入点</p>
<p>@Before 定义额外功能</p>
<p>@Order 定义先后顺序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//声明当前组件为一个切面</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明当前组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切入点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.lmt..StudentServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义额外功能</span></span><br><span class="line">    <span class="comment">//前</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"pc04()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置就是这个了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后可以接受返回值</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"pc04()"</span>,returning = <span class="string">"ret"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myAfter</span><span class="params">(Object ret)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置就是这个了"</span>);</span><br><span class="line">        System.out.println(<span class="string">"这是后的返回值："</span>+ret);</span><br><span class="line">        System.out.println(<span class="string">"这也是后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"pc04()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint p)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">        Object ret = p.proceed();<span class="comment">//调用核心逻辑</span></span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常时</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"pc04()"</span>,throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myThrows</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"出错啦"</span>+ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="导入外部参数文件"><a href="#导入外部参数文件" class="headerlink" title="导入外部参数文件"></a>导入外部参数文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入外部参数文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="与web集成"><a href="#与web集成" class="headerlink" title="与web集成"></a>与web集成</h2><h4 id="servlet相关依赖"><a href="#servlet相关依赖" class="headerlink" title="servlet相关依赖"></a>servlet相关依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="web-xml配置文件"><a href="#web-xml配置文件" class="headerlink" title="web.xml配置文件"></a>web.xml配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       在项目启动时，随之启动spring的工厂</span></span><br><span class="line"><span class="comment">       依赖：需要spring的配置文件</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--声明spring的配置文件位置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>opencv</title>
    <url>/2020/11/10/opencv/</url>
    <content><![CDATA[<h1 id="1-opencv"><a href="#1-opencv" class="headerlink" title="1 opencv"></a>1 opencv</h1><h2 id="1-1-第一章"><a href="#1-1-第一章" class="headerlink" title="1.1 第一章"></a>1.1 第一章</h2><h3 id="1-1-1-加载-修改-保存"><a href="#1-1-1-加载-修改-保存" class="headerlink" title="1.1.1 加载/修改/保存"></a>1.1.1 加载/修改/保存</h3><ul>
<li>加载图像（用cv::imread）</li>
<li>修改图像（cv::cvtColor）</li>
<li>保存图像（cv::imwrite）</li>
</ul>
<h4 id="1-1-1-1-加载图像"><a href="#1-1-1-1-加载图像" class="headerlink" title="1.1.1.1 加载图像"></a>1.1.1.1 加载图像</h4><ul>
<li>imread功能是加载图像文件成为一个Mat对象，其中第一个参数表示图像文件名称</li>
<li>第二个参数，表示加载的图像是什么类型，支持常见的三个参数值<ul>
<li>IMREAD_UNCHANGED(&lt;0)表示加载原图，不做任何改变</li>
<li>IMREAD_GRAYSCALE(0)表示把原图作为灰度图加载进来</li>
<li>IMREAD_COLOR(&gt;0)表示把原图作为RGB图像加载进来</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2020/11/10/Mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h3 id="jar包依赖"><a href="#jar包依赖" class="headerlink" title="jar包依赖"></a>jar包依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置mapper文件夹为配置文件夹"><a href="#配置mapper文件夹为配置文件夹" class="headerlink" title="配置mapper文件夹为配置文件夹"></a>配置mapper文件夹为配置文件夹</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/Java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.* <span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="主配置文件"><a href="#主配置文件" class="headerlink" title="主配置文件"></a>主配置文件</h4><ul>
<li>只有一个</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="mapper配置文件"><a href="#mapper配置文件" class="headerlink" title="mapper配置文件"></a>mapper配置文件</h4><ul>
<li>几个表就有几份</li>
<li>用来写SQL语句</li>
<li></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/lmt/mapper/StudentMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="log4j配置信息"><a href="#log4j配置信息" class="headerlink" title="log4j配置信息"></a>log4j配置信息</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,stdout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis.example.BlogMapper</span>=<span class="string">TRACE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.R.layout.ConversionPattern</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%t] [%c] [%p] - %m%n</span></span><br></pre></td></tr></table></figure>

<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">      InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">      <span class="comment">//SqlSessionFactory对象的作用就是为我们创建一个SqlSession对象</span></span><br><span class="line">      SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们未来所有的操作，使用的都是SqlSession对象session来完成</span></span><br><span class="line">      <span class="comment">//例如增删改查，处理事务等等，都是统一使用session对象来完成</span></span><br><span class="line">      SqlSession session = sqlSessionFactory.openSession();</span><br></pre></td></tr></table></figure>

<h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.close();</span><br></pre></td></tr></table></figure>

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="查单条"><a href="#查单条" class="headerlink" title="查单条"></a>查单条</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      *   需求：根据id查单条</span></span><br><span class="line"><span class="comment">      *       如果取得的是单条纪录，我们调用selectOne方法</span></span><br><span class="line"><span class="comment">      *       参数1：根据  命名空间名.SQLID 的形式找到我们需要使用的SQL语句</span></span><br><span class="line"><span class="comment">      *       参数2：我们要为SQL语句中传递的参数</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      Student student = session.selectOne(<span class="string">"test1.getById"</span>, <span class="string">"A0001"</span>);</span><br><span class="line">      System.out.println(student);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SQL语句必须写在相对应的标签中</span></span><br><span class="line"><span class="comment">       &lt;insert&gt;    &lt;update&gt;    &lt;delete&gt;  &lt;select&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.String"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_stident where id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="查所有"><a href="#查所有" class="headerlink" title="查所有"></a>查所有</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询学生信息表中所有的记录</span></span><br><span class="line">      List&lt;Student&gt; studentList = session.selectList(<span class="string">"test1.getAll"</span>);</span><br><span class="line">      <span class="keyword">for</span> (Student student:studentList)&#123;</span><br><span class="line">          System.out.println(student);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       如果返回的是多条记录，那么resultType返回值类型，应该写集合的泛型</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   Mybatis默认情况下是手动提交事务</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">     <span class="comment">//添加操作</span></span><br><span class="line">     Student student = <span class="keyword">new</span> Student();</span><br><span class="line">     student.setId(<span class="string">"A0006"</span>);</span><br><span class="line">     student.setName(<span class="string">"cxk"</span>);</span><br><span class="line">     student.setAge(<span class="number">23</span>);</span><br><span class="line">     session.insert(<span class="string">"test1.save"</span>, student);</span><br><span class="line">     session.commit();</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span>&gt;</span></span><br><span class="line">      insert into tbl_student (id,name,age) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改操作</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(<span class="string">"A0006"</span>);</span><br><span class="line">student.setName(<span class="string">"cxk"</span>);</span><br><span class="line">student.setAge(<span class="number">24</span>);</span><br><span class="line">session.update(<span class="string">"test1.update"</span>, student);</span><br><span class="line">session.commit();</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">       update tbl_student set name=#&#123;name&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除操作</span></span><br><span class="line">      session.delete(<span class="string">"test1.delete"</span>, <span class="string">"A0006"</span>);</span><br><span class="line">      session.commit();</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">       delete from tbl_student where id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Mybatis与JDBC"><a href="#Mybatis与JDBC" class="headerlink" title="Mybatis与JDBC"></a>Mybatis与JDBC</h3><ol>
<li>获取连接    得到statement    处理rs    关闭资源非常繁琐<ul>
<li>解决：使用SqlSession解决一切</li>
</ul>
</li>
<li>将SQL语句写死到Java代码中，如果修改SQL语句，必须要修改Java代码，需要重新编译。程序可维护性不高<ul>
<li>解决：将SQL语句配置在Mapper.xml文件中与Java代码分离</li>
</ul>
</li>
<li>向PreparedStatement对占位符的位置设置参数时，非常繁琐<ul>
<li>解决：Mybatis自动将Java对象映射至SQL语句，通过statement中的paramentType定义输入参数的类型</li>
</ul>
</li>
<li>解析结果集时需要把字段的值设置到相应的实体类属性名中<ul>
<li>解决：Mybatis自动将SQL执行结果映射至Java对象，通过statement中的resultType定义输出结果的类型</li>
</ul>
</li>
</ol>
<h3 id="Util工具类"><a href="#Util工具类" class="headerlink" title="Util工具类"></a>Util工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//类私有化，不能创建</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SqlSessionUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; t = <span class="keyword">new</span> ThreadLocal&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取得SqlSession对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session = t.get();</span><br><span class="line">        <span class="keyword">if</span> (session==<span class="keyword">null</span>)&#123;</span><br><span class="line">            session = sqlSessionFactory.openSession();</span><br><span class="line">            t.set(session);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭SqlSession对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myClose</span><span class="params">(SqlSession session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (session != <span class="keyword">null</span>)&#123;</span><br><span class="line">            session.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//这句必须加，非常容易忘</span></span><br><span class="line">            <span class="comment">//清空</span></span><br><span class="line">            t.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="业务层动态代理类"><a href="#业务层动态代理类" class="headerlink" title="业务层动态代理类"></a>业务层动态代理类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session = SqlSessionUtil.getSession();</span><br><span class="line">            <span class="comment">//处理业务逻辑</span></span><br><span class="line">            obj = method.invoke(target, args);</span><br><span class="line">            <span class="comment">//处理业务逻辑完毕后，提交事务</span></span><br><span class="line">            session.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            session.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            SqlSessionUtil.myClose(session);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//取得代理类对象</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getService</span><span class="params">(Object service)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransactionInvocationHandler(service).getProxy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过业务层实现"><a href="#通过业务层实现" class="headerlink" title="通过业务层实现"></a>通过业务层实现</h3><p>dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        SqlSession session = SqlSessionUtil.getSession();</span><br><span class="line">        Student student = session.selectOne(<span class="string">"test1.getById"</span>,id);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        SqlSession session = SqlSessionUtil.getSession();</span><br><span class="line">        session.insert(<span class="string">"test1.save"</span>,student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao = <span class="keyword">new</span> StudentDaoImpl();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        Student student = studentDao.getById(id);</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">        studentDao.save(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// StudentService studentService = new StudentServiceImpl();不行</span></span><br><span class="line">       StudentService studentService = (StudentService) ServiceFactory.getService(<span class="keyword">new</span> StudentServiceImpl());</span><br><span class="line">       Student student = <span class="keyword">new</span> Student();</span><br><span class="line">       student.setId(<span class="string">"A0006"</span>);</span><br><span class="line">       student.setName(<span class="string">"cxk"</span>);</span><br><span class="line">       student.setAge(<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">       studentService.save(student);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试根据id查单条操作</span></span><br><span class="line">      Student student = studentService.getById(<span class="string">"A0001"</span>);</span><br><span class="line">      System.out.println(student);</span><br></pre></td></tr></table></figure>

<h4 id="Mybatis对dao层动态代理的支持"><a href="#Mybatis对dao层动态代理的支持" class="headerlink" title="Mybatis对dao层动态代理的支持"></a>Mybatis对dao层动态代理的支持</h4><ul>
<li><p>我们以前用过动态代理，我们是在业务层使用的，在业务层使用动态代理是为了实现事务管理。</p>
</li>
<li><p>业务层的动态代理是我们手写的</p>
</li>
<li><p>业务层之所以要使用动态代理，是因为业务层本身就是用来处理业务逻辑的，事务相关的代码不方便放在业务层处理，所以我们想到使用代理类帮业务层去处理。</p>
</li>
<li><p>现在我们要在dao层也要加入动态代理。dao层之所以创建代理类，是因为写dao层本身就是一种不方便。在结合了mybatis的动态代理机制后，以后的实际项目开发，dao层的impl就不写了。Mybatis的动态代理不用我们自己手写，在mybatis中已经集成好的一种机制，我们直接拿来使用就可以了。</p>
</li>
</ul>
<h4 id="规定"><a href="#规定" class="headerlink" title="规定"></a>规定</h4><ul>
<li>映射文件名必须和dao接口名在必须相同</li>
<li>映射文件和接口必须在同一个包下</li>
<li>映射文件namespace必须为接口的全路径</li>
<li>接口的方法名必须和映射文件的id相同</li>
<li>对于查询来说，映射文件的传递类型和返回值类型必须和方法的保持一致</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lmt.dao.StudentDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getById"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">        select * from tbl_student where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span>&gt;</span></span><br><span class="line">        insert into tbl_student(id,name,age)values (#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getById</span><span class="params">(String id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对于业务层创建实现类方法为</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> StudentDao studentDao = SqlSessionUtil.getSession().getMapper(StudentDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><p>主方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有记录</span></span><br><span class="line">      StudentService studentService = (StudentService) ServiceFactory.getService(<span class="keyword">new</span> StudentServiceImpl());</span><br><span class="line">      List&lt;Student&gt; studentList = studentService.getAll();</span><br><span class="line">      <span class="keyword">for</span> (Student s:studentList)&#123;</span><br><span class="line">          System.out.println(s);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>dao service 接口添加对应方法</p>
<p>serviceimpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;Student&gt; studentList = studentDao.getAll();</span><br><span class="line">       <span class="keyword">return</span> studentList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>dao映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAll"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">      select * from tbl_student</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><h4 id="主配置文件-1"><a href="#主配置文件-1" class="headerlink" title="主配置文件"></a>主配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost/testmybatis?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以搭建环境，通过default进行选择--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClassName&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/lmt/dao/StudentDao.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span><span class="comment">&lt;!--没有必要--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 		为指定的类分别起别名</span></span><br><span class="line"><span class="comment">		type：要为哪个类起别名，填写全名</span></span><br><span class="line"><span class="comment">		alias：别名的名字</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.lmt.domain.Student"</span> <span class="attr">alias</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 		为package标签批量起别名</span></span><br><span class="line"><span class="comment">		别名是MyBatis默认为我们取好的，命名不是由我们自己决定，别名为类名（类名的字母不区分大小写）虽然不区分大小写，但是我们还是要按照约定俗称的规则写，写类名或者首字母小写</span></span><br><span class="line"><span class="comment">		name：指定一个包结构，表示在该包下，所有的domain自动起好了别名</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.lmt.domain"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		一般使用批量起别名的方式</span></span><br><span class="line"><span class="comment">		也有公司会摒弃使用起别名的机制，认为全路径可以增加可读性</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            使用resource属性，指定mapper映射文件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/lmt/dao/StudentDao.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             使用class属性，找到dao层接口的全路径</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"com.lmt.dao.StudentDao"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            批量注册(一般使用)</span></span><br><span class="line"><span class="comment">            name属性：指向dao层的包，表示在该dao包下，所有的mapper映射文件自动注册</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.lmt.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="海量级别的数据，提高效率"><a href="#海量级别的数据，提高效率" class="headerlink" title="海量级别的数据，提高效率"></a>海量级别的数据，提高效率</h3><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><p>对于常用的查询条件的字段，设置索引</p>
<h4 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h4><p>使用nosql数据库，redis</p>
<h4 id="专业操作"><a href="#专业操作" class="headerlink" title="专业操作"></a>专业操作</h4><p>搜索引擎（Elasticsearch与Solr），特针对于电商行业</p>
<h3 id="简单类型查询"><a href="#简单类型查询" class="headerlink" title="简单类型查询"></a>简单类型查询</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.测试：parameterType 使用简单数据类型 String</span></span><br><span class="line">Student student = studentDao.select1(<span class="string">"A0001"</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select1"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student where id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="int"><a href="#int" class="headerlink" title="int"></a>int</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.测试：使用简单数据类型 int</span></span><br><span class="line">      List&lt;Student&gt; student =  studentDao.select2(<span class="number">23</span>);</span><br><span class="line">      <span class="keyword">for</span> (Student student1:student)&#123;</span><br><span class="line">          System.out.println(student1);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select2"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student where age=#&#123;age&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="引用类型和集合类型"><a href="#引用类型和集合类型" class="headerlink" title="引用类型和集合类型"></a>引用类型和集合类型</h3><ul>
<li>在实际项目的开发中，使用domain和map都可以为SQL语句同时传递多个参数</li>
<li>一般情况下，我们使用domain就行了</li>
<li>当domain不符合需求的情况下，我们一定要考虑使用map来传值</li>
</ul>
<h4 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.测试：使用domain为参数</span></span><br><span class="line">     <span class="comment">/* 查询出姓名为wyf,年龄为23岁的学员信息</span></span><br><span class="line"><span class="comment">      绝对不可以为SQL语句传递多个参数,如  select（"wyf",23）</span></span><br><span class="line"><span class="comment">      如果我们要为SQL语句传递多个参数，我们应该将这多个参数封装到一个domain对象中，或者打包到一个map集合中*/</span></span><br><span class="line">      Student student = <span class="keyword">new</span> Student();</span><br><span class="line">      student.setName(<span class="string">"wyf"</span>);</span><br><span class="line">      student.setAge(<span class="number">23</span>);</span><br><span class="line">      List&lt;Student&gt; studentList = studentDao.select3(student);</span><br><span class="line">      <span class="keyword">for</span> (Student student1:studentList)&#123;</span><br><span class="line">          System.out.println(student1);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	#&#123;&#125;中的属性名必须是domain类的属性名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select3"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student where name=#&#123;name&#125; and name=#&#123;name&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.测试：使用map为参数</span></span><br><span class="line">      Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">      map.put(<span class="string">"name"</span>,<span class="string">"wyf"</span>);</span><br><span class="line">      map.put(<span class="string">"age"</span>, <span class="number">23</span>);</span><br><span class="line">      List&lt;Student&gt; studentList = studentDao.select4(map);</span><br><span class="line">      <span class="keyword">for</span> (Student student1:studentList)&#123;</span><br><span class="line">          System.out.println(student1);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select4"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student where name=#&#123;name&#125; and name=#&#123;name&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="与"><a href="#与" class="headerlink" title="#{}与${}"></a>#{}与${}</h3><ul>
<li><p>#{}：表示占位符，可以有效防止SQL注入。使用其设置参数无需考虑参数的类型，只能占值的位置</p>
</li>
<li><p>${}：表示拼接符，无法防止SQL注入。使用其设置参数必须考虑参数的类型</p>
</li>
<li><p>传递简单参数类型</p>
<ul>
<li>如果获取简单类型参数，#{}中可以使用value或其他名称</li>
<li>如果获取简单参数类型，${}中只能使用value</li>
</ul>
</li>
<li><p>在没有特殊要求的情况下，通常使用#{}占位符</p>
</li>
<li><p>在某些情况下必须使用${}</p>
<ul>
<li><p>如：需要动态拼接表名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select * from $&#123;tablename&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如：动态【拼接排序字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from tablename order by $&#123;username&#125; desc</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="like模糊查询"><a href="#like模糊查询" class="headerlink" title="like模糊查询"></a>like模糊查询</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用${}"></a>使用${}</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.测试：like模糊查询 方式1：使用 $&#123;&#125;了解</span></span><br><span class="line">      List&lt;Student&gt; studentList = studentDao.select5(<span class="string">"z"</span>);</span><br><span class="line">      <span class="keyword">for</span> (Student student:studentList)&#123;</span><br><span class="line">          System.out.println(student);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select5"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student where name like '%$&#123;value&#125;%'</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用#{}"></a>使用#{}</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6.测试：like模糊查询 方式1：使用 $&#123;&#125;了解</span></span><br><span class="line">      List&lt;Student&gt; studentList = studentDao.select6(<span class="string">"z"</span>);</span><br><span class="line">      <span class="keyword">for</span> (Student student:studentList)&#123;</span><br><span class="line">          System.out.println(student);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       %空格#&#123;&#125;空格%</span></span><br><span class="line"><span class="comment">	空格用于拼接，不能省略</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select6"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student where name like '%' #&#123;name&#125; '%'</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>设置返回值类型</p>
<ul>
<li>返回简单类型  8+String</li>
<li>返回pojo  domain</li>
<li>返回hashmap（注意返回值类型）</li>
<li>当查询字段名和pojo属性名不一致时的解决方案</li>
</ul>
<h4 id="返回String"><a href="#返回String" class="headerlink" title="返回String"></a>返回String</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//10.测试：返回String类型</span></span><br><span class="line">      String name = studentDao.select10(<span class="string">"A0001"</span>);</span><br><span class="line">      System.out.println(name);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select10"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">       select name from tbl_student where id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="返回String类型集合"><a href="#返回String类型集合" class="headerlink" title="返回String类型集合"></a>返回String类型集合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//11.测试：返回String类型集合</span></span><br><span class="line">      <span class="comment">//查询出所有学生的名字</span></span><br><span class="line">      List&lt;String&gt; nameList= studentDao.select11();</span><br><span class="line">      <span class="keyword">for</span> (String name1:nameList)&#123;</span><br><span class="line">          System.out.println(name1);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select11"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">       select name from tbl_student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="返回int类型"><a href="#返回int类型" class="headerlink" title="返回int类型"></a>返回int类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//12.测试：返回int类型</span></span><br><span class="line">      <span class="comment">//需求：查询表中一共有多少条信息</span></span><br><span class="line">      <span class="keyword">int</span> count = studentDao.select12();</span><br><span class="line">      System.out.println(count);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select12"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">       select count(*) from tbl_student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="返回domain类型（略）"><a href="#返回domain类型（略）" class="headerlink" title="返回domain类型（略）"></a>返回domain类型（略）</h4><h4 id="返回map类型"><a href="#返回map类型" class="headerlink" title="返回map类型"></a>返回map类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//14.测试：返回map类型</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">          系统会为我们自动创建出来一个list集合来保存这些map对象</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      List&lt;Map&lt;String,Object&gt;&gt; mapList= studentDao.select14();</span><br><span class="line">      <span class="comment">//拆分list</span></span><br><span class="line">      <span class="keyword">for</span> (Map&lt;String,Object&gt; map:mapList)&#123;</span><br><span class="line">          Set&lt;String&gt; set = map.keySet();</span><br><span class="line">          <span class="keyword">for</span> (String key:set)&#123;</span><br><span class="line">              <span class="comment">// 获取key</span></span><br><span class="line">              System.out.print(key+<span class="string">"="</span>);</span><br><span class="line">              <span class="comment">// 获取value</span></span><br><span class="line">              System.out.println(map.get(key));</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select14"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">       select * from tbl_student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="domain和map"><a href="#domain和map" class="headerlink" title="domain和map"></a>domain和map</h4><ul>
<li>对于SQL语句查询的结果，使用domain会更加方便</li>
<li>但是对于查询结果，很多情况，使用domain封装不了，所以我们会想到使用map来保存结果，如：根据年龄分组，查询出来每一个姓名对应的数量</li>
</ul>
<h4 id="对于字段名和domain属性类型不一致的处理"><a href="#对于字段名和domain属性类型不一致的处理" class="headerlink" title="对于字段名和domain属性类型不一致的处理"></a>对于字段名和domain属性类型不一致的处理</h4><h5 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//15.测试：当数据库表字段名称和domain类属性名不一致时的处理</span></span><br><span class="line">      List&lt;Student&gt; studentList = studentDao.select15();</span><br><span class="line">      <span class="keyword">for</span> (Student student:studentList)&#123;</span><br><span class="line">          System.out.println(student);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 起别名的方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select15"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select id,fullname as name,age from tbl_student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="使用resultMap"><a href="#使用resultMap" class="headerlink" title="使用resultMap"></a>使用resultMap</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//16.测试：当数据库表字段名称和domain类属性名不一致时的处理</span></span><br><span class="line">      List&lt;Student&gt; studentList = studentDao.select16();</span><br><span class="line">      <span class="keyword">for</span> (Student student:studentList)&#123;</span><br><span class="line">          System.out.println(student);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       id:唯一标识</span></span><br><span class="line"><span class="comment">           将来在使用到该resultMap标签时，使用id来找到这组标签</span></span><br><span class="line"><span class="comment">       type：指定一个类型，与数据库表一一对应，建立起表字段和类属性的名字一一匹配的关系</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"stuMap"</span> <span class="attr">type</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           id:用来配置主键的对应关系</span></span><br><span class="line"><span class="comment">           result：用来配置普通字段对应关系的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           对于tbl_student表，表结果时一个id，两个普通字段</span></span><br><span class="line"><span class="comment">           所以我们需要一个id标签，两个result标签</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           property属性：配置的是类中的属性名</span></span><br><span class="line"><span class="comment">           column属性：配置的是表中的字段名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           这样就能建立起类属性和表字段一一对应的关系了</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"fullname"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select16"</span> <span class="attr">resultMap</span>=<span class="string">"stuMap"</span>&gt;</span></span><br><span class="line">       select * from tbl_student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h3><h4 id="where-if"><a href="#where-if" class="headerlink" title="where + if"></a>where + if</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//17.测试：动态SQL   where标签结合if标签</span></span><br><span class="line">      Student student = <span class="keyword">new</span> Student();</span><br><span class="line">      student.setName(<span class="string">"y"</span>);</span><br><span class="line">      student.setAddress(<span class="string">"a"</span>);</span><br><span class="line">      List&lt;Student&gt; studentList1 = studentDao.select17(student);</span><br><span class="line">      <span class="keyword">for</span> (Student student1:studentList1)&#123;</span><br><span class="line">          System.out.println(student1);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select17"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">        select * from tbl_student</span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            where标签：</span></span><br><span class="line"><span class="comment">                    当where标签在使用的时候，必须要搭配where标签对中的if标签来使用</span></span><br><span class="line"><span class="comment">                    通过if标签的判断，如果有查询条件，则展现where关键字，如果没有查询条件则不展现where关键字</span></span><br><span class="line"><span class="comment">					where标签会自动的屏蔽掉第一个连接符 and/or</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--name不等于空，同时name不等于空串--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null and name!=''"</span>&gt;</span></span><br><span class="line">                and name like '%' #&#123;name&#125; '%'</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address!=null and address!=''"</span>&gt;</span></span><br><span class="line">                and address like '%' #&#123;address&#125; '%'</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 18.测试；动态SQL foreach标签</span></span><br><span class="line">        <span class="comment">//查询这三个学员的信息</span></span><br><span class="line">        String stringArr[] = &#123;<span class="string">"A0001"</span>,<span class="string">"A0002"</span>,<span class="string">"A0003"</span>&#125;;</span><br><span class="line">        List&lt;Student&gt; studentList = studentDao.select18(stringArr);</span><br><span class="line">        <span class="keyword">for</span> (Student student1:studentList)&#123;</span><br><span class="line">            System.out.println(student1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select18"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">       select * from tbl_student</span><br><span class="line">       where id in</span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">           foreach标签：用来遍历传递来的数组标签</span></span><br><span class="line"><span class="comment">               collection：标识传递参数的类型</span></span><br><span class="line"><span class="comment">                       array：数组</span></span><br><span class="line"><span class="comment">                       list：集合</span></span><br><span class="line"><span class="comment">               item：每一次遍历出来的元素，在使用该元素的时候，需要套用在#&#123;&#125;中</span></span><br><span class="line"><span class="comment">               open：拼接循环的开始符号</span></span><br><span class="line"><span class="comment">               close：拼接循环的结束符号</span></span><br><span class="line"><span class="comment">               separator：元素与元素之间的分隔符</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">           #&#123;id&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//19.测试：sql片段</span></span><br><span class="line">      Student student = studentDao.select19(<span class="string">"A0001"</span>);</span><br><span class="line">      System.out.println(student);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    使用SQL标签制作SQL片段</span></span><br><span class="line"><span class="comment">    SQL片段的作用是用来代替SQL语句中的代码</span></span><br><span class="line"><span class="comment">    如果你的mapper映射文件中的SQL语句某些代码出现了大量的重复，我们可以使用SQL片段来代替他们</span></span><br><span class="line"><span class="comment">    id：SQL片段的唯一标识，将来找到SQL片段使用id来进行定位</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    将来的实际项目开发中，使用SQL片段来替代重复率高，且复杂的子查询</span></span><br><span class="line"><span class="comment">    如：嵌套查询</span></span><br><span class="line"><span class="comment">    注意：对于SQL片段</span></span><br><span class="line"><span class="comment">            在同一个mapper下，大量的出现重复的子查询的几率不高，所以一般情况下没有使用SQL片段的必要</span></span><br><span class="line"><span class="comment">            在实际项目开发中，如果大量的使用SQL片段，会大大的降低SQL语句的可读性</span></span><br><span class="line"><span class="comment">            在很多企业中，干脆不用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sql1"</span>&gt;</span></span><br><span class="line">    select * from tbl_student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select19"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.domain.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"sql1"</span>/&gt;</span> where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多表联查"><a href="#多表联查" class="headerlink" title="多表联查"></a>多表联查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//20.测试：多表联查</span></span><br><span class="line">      <span class="comment">//查询出学生姓名和班级</span></span><br><span class="line">      List&lt;Map&lt;String,Object&gt;&gt; mapListList = studentDao.select20();</span><br><span class="line">      <span class="keyword">for</span> (Map&lt;String,Object&gt; map:mapListList)&#123;</span><br><span class="line">          Set&lt;String&gt; set = map.keySet();</span><br><span class="line">          <span class="keyword">for</span> (String key:set)&#123;</span><br><span class="line">              <span class="comment">// 获取key</span></span><br><span class="line">              System.out.print(key+<span class="string">"="</span>);</span><br><span class="line">              <span class="comment">// 获取value</span></span><br><span class="line">              System.out.println(map.get(key));</span><br><span class="line">          &#125;</span><br><span class="line">          System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select20"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">       select s.name as 学生,c.name as 班级</span><br><span class="line">       from tbl_student s</span><br><span class="line">       join tbl_classroom c</span><br><span class="line">       on s.classroomId=c.id</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用vo"><a href="#使用vo" class="headerlink" title="使用vo"></a>使用vo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//21.测试：多表联查</span></span><br><span class="line">        <span class="comment">//查询出学生和班级所有信息，加VO（value Object）</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   在实际项目开发中，如果需要为前端展现数据，使用一个domain类型不足以表现出来这些数据</span></span><br><span class="line"><span class="comment">        *   这时我们可以考虑使用两种技术来实现</span></span><br><span class="line"><span class="comment">        *   分别为：</span></span><br><span class="line"><span class="comment">        *       使用map</span></span><br><span class="line"><span class="comment">        *       使用vo</span></span><br><span class="line"><span class="comment">        *   例如我们现在的需求</span></span><br><span class="line"><span class="comment">        *       查询出学生和班级所有信息</span></span><br><span class="line"><span class="comment">        *       得到的结果 使用学生的domain或者班级的domain都不能都封装这些结果</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *       所以我们可以使用map去保存这些信息</span></span><br><span class="line"><span class="comment">        *       同时我们也可以使用vo类来保存这些信息</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *       vo值得是创建出来一个类，这个类中的属性是完全由我们自己去定义，属性会保存所有需要展现的信息</span></span><br><span class="line"><span class="comment">        *       例如我们现在这个例子，我们可以使用vo来封装所有与学生和班级相关的信息</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *       vo</span></span><br><span class="line"><span class="comment">        *           student</span></span><br><span class="line"><span class="comment">        *           classroom</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        List&lt;StudentAndClassroomVo&gt; studentAndClassroomVoList = studentDao.select21();</span><br><span class="line">        <span class="keyword">for</span> (StudentAndClassroomVo studentAndClassroomVo:studentAndClassroomVoList)&#123;</span><br><span class="line">            System.out.println(studentAndClassroomVo);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select21"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.vo.StudentAndClassroomVo"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        s.id sid,</span><br><span class="line">        s.name sname,</span><br><span class="line">        s.age sage,</span><br><span class="line">        s.address saddress,</span><br><span class="line">        c.id cid,</span><br><span class="line">        c.name cname</span><br><span class="line">        from tbl_student s</span><br><span class="line">        join tbl_classroom c</span><br><span class="line">        on s.classroomId=c.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="vo条件查询"><a href="#vo条件查询" class="headerlink" title="vo条件查询"></a>vo条件查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//22.测试：多表联查</span></span><br><span class="line">      <span class="comment">//查询出带有字母z的学生和班级所有信息</span></span><br><span class="line">      List&lt;StudentAndClassroomVo&gt; studentAndClassroomVoList = studentDao.select22(<span class="string">"z"</span>);</span><br><span class="line">      <span class="keyword">for</span> (StudentAndClassroomVo studentAndClassroomVo:studentAndClassroomVoList)&#123;</span><br><span class="line">          System.out.println(studentAndClassroomVo);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select22"</span> <span class="attr">resultType</span>=<span class="string">"com.lmt.vo.StudentAndClassroomVo"</span>&gt;</span></span><br><span class="line">       select</span><br><span class="line">       s.id sid,</span><br><span class="line">       s.name sname,</span><br><span class="line">       s.age sage,</span><br><span class="line">       s.address saddress,</span><br><span class="line">       c.id cid,</span><br><span class="line">       c.name cname</span><br><span class="line"></span><br><span class="line">       from tbl_student s</span><br><span class="line">       join tbl_classroom c</span><br><span class="line">       on s.classroomId=c.id</span><br><span class="line"></span><br><span class="line">       where s.name like '%' #&#123;name&#125; '%'</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="map-与-vo"><a href="#map-与-vo" class="headerlink" title="map 与 vo"></a>map 与 vo</h4><ul>
<li>如果前端的需求的重复率不高，那么我们选择使用map就可以了</li>
<li>如果前端对于该需求的重复率较高，那么我们就可以创建一个vo类使用</li>
</ul>
<h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><ul>
<li><p>注解在接口上实现</p>
</li>
<li><p>需要在核心配置文件中绑定接口</p>
</li>
<li><p>本质：反射机制实现</p>
</li>
<li><p>底层：动态代理</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>IDEA使用技巧</title>
    <url>/2020/11/10/IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="IDEA使用技巧"><a href="#IDEA使用技巧" class="headerlink" title="IDEA使用技巧"></a>IDEA使用技巧</h1><h3 id="修改骨架"><a href="#修改骨架" class="headerlink" title="修改骨架"></a>修改骨架</h3><ol>
<li>找到自己的本地仓库 - org - apache - maven - apchetypes</li>
<li>已经用过的骨架全在这个文件夹下</li>
<li>找到里面的  jar包，不要解压，直接打开</li>
<li>找到里面的  pom.xml  即可修改骨架</li>
<li>保存修改即可</li>
</ol>
<h3 id="提示大小写不敏感"><a href="#提示大小写不敏感" class="headerlink" title="提示大小写不敏感"></a>提示大小写不敏感</h3><ol>
<li>在Settings - Editor - General - Code Completion 中</li>
<li>把最上面的 Match case 的勾点掉</li>
</ol>
<h3 id="单行注释缩进"><a href="#单行注释缩进" class="headerlink" title="单行注释缩进"></a>单行注释缩进</h3><ul>
<li>Java<ol>
<li>在Settings - Editor - Code Style - Java 页面</li>
<li>最后一列  Code Generation </li>
<li>中间位置，右侧Comment Code</li>
<li>去掉勾选 Line comment at first column</li>
</ol>
</li>
<li>XML<ol>
<li>在Settings - Editor - Code Style - XML 页面</li>
<li>在靠后位置  Code Generation 列</li>
<li>去掉勾选 Line comment at first column</li>
</ol>
</li>
</ul>
<h3 id="一些常用的插件"><a href="#一些常用的插件" class="headerlink" title="一些常用的插件"></a>一些常用的插件</h3><ul>
<li>CodeGlance   代码地图，滚动条放大镜</li>
<li>Translation   翻译软件</li>
<li>Rainbow Brackets    多种颜色的括号</li>
<li>Grep Console    控制台输出信息颜色</li>
<li>Statistic   项目统计</li>
<li>Markdown Navigator   </li>
<li>RestfulToolkit   快速定位</li>
<li>GsonFormat   Gson对象生成</li>
<li>MyBatis Log Plugin   MyBatis 显示执行的SQL语句</li>
<li>Free Mybatis plugin   MyBatis map和接口快速跳转</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/03/08/SpringMVC/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><a id="more"></a>

<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2020/03/01/JDBC/</url>
    <content><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><a id="more"></a>

<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="1-1获取连接"><a href="#1-1获取连接" class="headerlink" title="1.1获取连接"></a>1.1获取连接</h2><ul>
<li>数据库url:     ==url=“ jdbc:mysql://localhost:3306/数据库名 ”==</li>
<li>配置信息<ul>
<li>用户名：</li>
<li>密码：</li>
</ul>
</li>
<li>驱动</li>
</ul>
<h3 id="1-1-1-配置文件获取连接"><a href="#1-1-1-配置文件获取连接" class="headerlink" title="1.1.1 配置文件获取连接"></a>1.1.1 配置文件获取连接</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost/testjdbc?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.读取配置文件中的四个基本信息</span></span><br><span class="line">        InputStream is = GetConnection1.class.getClassLoader().getResourceAsStream("配置文件路径");</span><br><span class="line">        Properties pros =<span class="keyword">new</span> Properties();</span><br><span class="line">        pros.load(is);</span><br><span class="line">        String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        String url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">        String driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载驱动</span></span><br><span class="line">        Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取连接</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">    	<span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-2-关闭资源"><a href="#1-2-关闭资源" class="headerlink" title="1.2 关闭资源"></a>1.2 关闭资源</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource1</span><span class="params">(Connection conn, Statement ps,ResultSet rs)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((ps != <span class="keyword">null</span>))&#123;</span><br><span class="line">                ps.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-3-PreparedStatement和Statement"><a href="#1-3-PreparedStatement和Statement" class="headerlink" title="1.3 PreparedStatement和Statement"></a>1.3 PreparedStatement和Statement</h2><h3 id="1-3-1-Statement存在的问题"><a href="#1-3-1-Statement存在的问题" class="headerlink" title="1.3.1 Statement存在的问题"></a>1.3.1 Statement存在的问题</h3><ul>
<li>需要拼写SQL语句</li>
<li>存在SQL注入问题</li>
</ul>
<h3 id="1-3-2-Statement对数据库进行操作"><a href="#1-3-2-Statement对数据库进行操作" class="headerlink" title="1.3.2 Statement对数据库进行操作"></a>1.3.2 Statement对数据库进行操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String user = <span class="string">"张三"</span>;</span><br><span class="line">String password = <span class="string">"zhangsan"</span>;</span><br><span class="line">String sql = <span class="string">"SELECT USER,PASSWORD FROM user_table WHERE USER = '"</span>+user+<span class="string">"' AND PASSWORD = '"</span>+password+<span class="string">"'"</span>;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3-PreparedStatement对数据库进行操作"><a href="#1-3-3-PreparedStatement对数据库进行操作" class="headerlink" title="1.3.3 PreparedStatement对数据库进行操作"></a>1.3.3 PreparedStatement对数据库进行操作</h3><h4 id="1-3-3-1-增删改"><a href="#1-3-3-1-增删改" class="headerlink" title="1.3.3.1 增删改"></a>1.3.3.1 增删改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.预编译SQL语句，</span></span><br><span class="line">        String sql = <span class="string">"insert into customers(name,email,birth)values(?,?,?)"</span>;</span><br><span class="line">        PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.填充占位符</span></span><br><span class="line">        ps.setString(<span class="number">1</span>,<span class="string">"哪吒"</span>);</span><br><span class="line">        ps.setString(<span class="number">2</span>,<span class="string">"nezha@qq.com"</span>);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        java.util.Date date = sdf.parse(<span class="string">"1000-01-01"</span>);</span><br><span class="line">        ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> Date(date.getTime()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.执行操作</span></span><br><span class="line">        ps.execute();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//7.资源的关闭</span></span><br><span class="line">        ps.close();</span><br><span class="line">        conn.close();</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-2-通用的增删改"><a href="#1-3-3-2-通用的增删改" class="headerlink" title="1.3.3.2 通用的增删改"></a>1.3.3.2 通用的增删改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PreparedStatementTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from customers where id = ?"</span>;</span><br><span class="line">        update(sql,<span class="number">3</span>,...);<span class="comment">//有几个问号，写几个参数</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql, Object ...args)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span> ;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.连接数据库</span></span><br><span class="line">            connection = getConnection1();</span><br><span class="line">            <span class="comment">//2.预编译的SQL语句，返回PreparedStatement实例</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//3.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i + <span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.执行</span></span><br><span class="line">            preparedStatement.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.关闭资源</span></span><br><span class="line">            closeResource1(connection,preparedStatement,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3-3-通用查询"><a href="#1-3-3-3-通用查询" class="headerlink" title="1.3.3.3 通用查询"></a>1.3.3.3 通用查询</h4><h5 id="1-3-3-3-1-返回表中的一条数据"><a href="#1-3-3-3-1-返回表中的一条数据" class="headerlink" title="1.3.3.3.1 返回表中的一条数据"></a>1.3.3.3.1 返回表中的一条数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StatementTest st = <span class="keyword">new</span> StatementTest();</span><br><span class="line">      String sql = <span class="string">"select id,name,email from customers where id=?"</span>;</span><br><span class="line">      Customer customer = st.query1(Customer<span class="class">.<span class="keyword">class</span>, <span class="title">sql</span>, 2)</span>;</span><br><span class="line">      System.out.println(customer);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T  <span class="title">query1</span><span class="params">(Class&lt;T&gt; clazz,String sql,Object...args)</span> </span>&#123;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">       ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           connection = getConnection1();</span><br><span class="line">           preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length; i++)&#123;</span><br><span class="line">               preparedStatement.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">           &#125;</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           <span class="comment">//获取结果集的数据元</span></span><br><span class="line">           ResultSetMetaData resultSetMetaData = resultSet.getMetaData();</span><br><span class="line">           <span class="comment">//获取结果集的列数</span></span><br><span class="line">           <span class="keyword">int</span> columnCount = resultSetMetaData.getColumnCount();</span><br><span class="line">           <span class="keyword">if</span> (resultSet.next())&#123;</span><br><span class="line">               T t = clazz.newInstance();</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; columnCount;i++) &#123;</span><br><span class="line">                   <span class="comment">//获取列值</span></span><br><span class="line">                   Object columvalue = resultSet.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//获取某个列的列名</span></span><br><span class="line">                   String columnName = resultSetMetaData.getColumnName(i+<span class="number">1</span>);</span><br><span class="line">                   <span class="comment">//给customer对象指定的某个属性，赋值为value</span></span><br><span class="line">                   <span class="comment">//给customer对象指定的columnName属性，赋值为columvalues,通过反射</span></span><br><span class="line">                   Field field = clazz.getDeclaredField(columnName);</span><br><span class="line">                   field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                   field.set(t,columvalue);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> t;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           closeResource1(connection,preparedStatement,resultSet);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-3-3-2-返回多行数据"><a href="#1-3-3-3-2-返回多行数据" class="headerlink" title="1.3.3.3.2 返回多行数据"></a>1.3.3.3.2 返回多行数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StatementTest st = <span class="keyword">new</span> StatementTest();</span><br><span class="line">      String sql = <span class="string">"select id,name,birth from student where id&lt;?"</span>;</span><br><span class="line">      List&lt;Student&gt; list = st.query2(Student<span class="class">.<span class="keyword">class</span>, <span class="title">sql</span>, 4)</span>;</span><br><span class="line">      list.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h5 id="1-3-3-3-3-查所有"><a href="#1-3-3-3-3-查所有" class="headerlink" title="1.3.3.3.3 查所有"></a>1.3.3.3.3 查所有</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StatementTest st &#x3D; new StatementTest();</span><br><span class="line">      String sql &#x3D; &quot;select id,name,birth from student &quot;;</span><br><span class="line">      List&lt;Student&gt; list &#x3D; st.query2(Student.class, sql);</span><br><span class="line">      list.forEach(System.out::println);</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">query2</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object...args)</span> </span>&#123;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">       ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           connection = getConnection1();</span><br><span class="line">           preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length; i++)&#123;</span><br><span class="line">               preparedStatement.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">           &#125;</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           <span class="comment">//获取结果集的数据元</span></span><br><span class="line">           ResultSetMetaData resultSetMetaData = resultSet.getMetaData();</span><br><span class="line">           <span class="comment">//获取结果集的列数</span></span><br><span class="line">           <span class="keyword">int</span> columnCount = resultSetMetaData.getColumnCount();</span><br><span class="line">           <span class="comment">//创建集合对象</span></span><br><span class="line">           ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">           <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">               T t = clazz.newInstance();</span><br><span class="line">               <span class="comment">//处理结果集数据中的每一个列：给t对象指定的属性赋值</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; columnCount;i++) &#123;</span><br><span class="line">                   <span class="comment">//获取列值</span></span><br><span class="line">                   Object columvalue = resultSet.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//获取某个列的列名</span></span><br><span class="line">                   String columnName = resultSetMetaData.getColumnName(i+<span class="number">1</span>);</span><br><span class="line">                   <span class="comment">//给customer对象指定的某个属性，赋值为value</span></span><br><span class="line">                   <span class="comment">//给customer对象指定的columnName属性，赋值为columvalues,通过反射</span></span><br><span class="line">                   Field field = clazz.getDeclaredField(columnName);</span><br><span class="line">                   field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                   field.set(t,columvalue);</span><br><span class="line">               &#125;</span><br><span class="line">               list.add(t);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> list;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           closeResource1(connection,preparedStatement,resultSet);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>通用特殊值查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用特殊值查询</span></span><br><span class="line">   <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getValue</span><span class="params">(Connection connection,String sql,Object...args)</span>  </span>&#123;</span><br><span class="line">       PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">       ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;args.length;i++)&#123;</span><br><span class="line">               preparedStatement.setObject(i + <span class="number">1</span>,args[i]);</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           resultSet = preparedStatement.executeQuery();</span><br><span class="line">           <span class="keyword">if</span> (resultSet.next())&#123;</span><br><span class="line">               <span class="keyword">return</span> (E) resultSet.getObject(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JDBC.closeResource1(<span class="keyword">null</span>,preparedStatement,resultSet);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-3-3-4-插入图片"><a href="#1-3-3-4-插入图片" class="headerlink" title="1.3.3.4 插入图片"></a>1.3.3.4 插入图片</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       Connection connection = JDBC.getConnection1();</span><br><span class="line">       String sql = <span class="string">"insert into student(id,photo)values (?,?)"</span>;</span><br><span class="line">       PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">       preparedStatement.setObject(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">       FileInputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"F:\\red-pagoda-temple-3380967.jpg"</span>);</span><br><span class="line">       preparedStatement.setBlob(<span class="number">2</span>,is);</span><br><span class="line">       preparedStatement.execute();</span><br><span class="line">       JDBC.closeResource1(connection,preparedStatement,<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-4Statement和PreparedStatement区别"><a href="#1-3-4Statement和PreparedStatement区别" class="headerlink" title="1.3.4Statement和PreparedStatement区别"></a>1.3.4Statement和PreparedStatement区别</h3><ul>
<li>解决了Statement的拼串</li>
<li>解决了SQL注入问题</li>
<li>PreparedStatement可以操作Blob的数据</li>
<li>PreparedStatement可以实现更高效的批量操作</li>
</ul>
<h2 id="1-4-批量插入"><a href="#1-4-批量插入" class="headerlink" title="1.4 批量插入"></a>1.4 批量插入</h2><ul>
<li><p>ddBatch()     excuteBatch()     clearBatch()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置不允许自动提交数据</span></span><br><span class="line">         conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">10000</span>;i++)&#123;</span><br><span class="line">             <span class="comment">//1.攒SQL</span></span><br><span class="line">             ps.addBatch();</span><br><span class="line">             <span class="keyword">if</span> (i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                 <span class="comment">//2.执行batch</span></span><br><span class="line">                 ps.executeBatch();</span><br><span class="line">                 <span class="comment">//3.清空batch</span></span><br><span class="line">                 ps.clearBatch();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//4.统一提交</span></span><br><span class="line">         conn.commit();</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>mysql服务器默认关闭批处理，修改参数,写在配置文件url的后面  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?rewriteBetchedStatements&#x3D;true</span><br></pre></td></tr></table></figure>
</li>
<li><p>不允许自动提交</p>
</li>
</ul>
<h2 id="1-5-事务"><a href="#1-5-事务" class="headerlink" title="1.5 事务"></a>1.5 事务</h2><ul>
<li>当一个事务中执行多个操作时，要么所有的事物==都被提交==，要么放弃所有修改，==整个事务回滚==到最初的状态</li>
<li>数据一旦提交就不可回滚</li>
<li>当一个连接被创建时，默认情况下是自动提交事务</li>
<li>关闭数据库连接，数据就会自动提交</li>
<li>DDL操作一旦执行，都会自动提交，set autocommit = false对DDL不起作用</li>
<li>DML默认情况下，一旦执行，就会自动提交，可以通过 set autocommit = false取消自动提交</li>
<li>使用后需要恢复自动提交状态</li>
</ul>
<h3 id="1-5-1-考虑事务通用的增删改"><a href="#1-5-1-考虑事务通用的增删改" class="headerlink" title="1.5.1 考虑事务通用的增删改"></a>1.5.1 考虑事务通用的增删改</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟转账</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = JDBC.getConnection1();</span><br><span class="line">            System.out.println(connection.getAutoCommit());</span><br><span class="line">            <span class="comment">//1.取消数据自动提交</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">//操作一</span></span><br><span class="line">            String sql1 = <span class="string">"update user_table set balance = balance - 100 where user = ?"</span>;</span><br><span class="line">            update(connection,sql1,<span class="string">"AA"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟网络异常</span></span><br><span class="line"><span class="comment">//            System.out.println(10/0);</span></span><br><span class="line">            <span class="comment">//操作二</span></span><br><span class="line">            String sql2 = <span class="string">"update user_table set balance = balance + 100 where user = ?"</span>;</span><br><span class="line">            update(connection,sql2,<span class="string">"BB"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.提交数据</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">"转账成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//3.回滚数据</span></span><br><span class="line">                connection.rollback();</span><br><span class="line">                System.out.println(<span class="string">"转账失败"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//恢复自动提交状态</span></span><br><span class="line">                connection.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            JDBC.closeResource1(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection connection,String sql, Object ...args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Connection connection = null ;</span></span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.连接数据库</span></span><br><span class="line"><span class="comment">//            connection = JDBC.getConnection1();</span></span><br><span class="line">            <span class="comment">//2.预编译的SQL语句，返回PreparedStatement实例</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//3.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i + <span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.执行</span></span><br><span class="line">            preparedStatement.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//5.关闭资源</span></span><br><span class="line">            JDBC.closeResource1(<span class="keyword">null</span>,preparedStatement,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-2-事务的ACID属性"><a href="#1-5-2-事务的ACID属性" class="headerlink" title="1.5.2 事务的ACID属性"></a>1.5.2 事务的ACID属性</h3><ol>
<li>原子性</li>
<li>一致性</li>
<li>隔离性</li>
<li>持久性</li>
</ol>
<h3 id="1-5-3-数据库的并发"><a href="#1-5-3-数据库的并发" class="headerlink" title="1.5.3 数据库的并发"></a>1.5.3 数据库的并发</h3><ul>
<li>脏读</li>
<li>不可重复读</li>
<li>幻读</li>
</ul>
<h3 id="1-5-4-四种隔离级别"><a href="#1-5-4-四种隔离级别" class="headerlink" title="1.5.4 四种隔离级别"></a>1.5.4 四种隔离级别</h3><ol>
<li>READ UNCOMMITTED    (读未提交数据)</li>
<li>READ COMMITED    (读已提交数据)</li>
<li>REPEATABLE READ    (可重复读)</li>
<li>SERIALIZABLE    (序列化)</li>
</ol>
<h2 id="1-6-升级操作"><a href="#1-6-升级操作" class="headerlink" title="1.6 升级操作"></a>1.6 升级操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerImpl</span> <span class="keyword">extends</span> <span class="title">BaseDAO</span>&lt;<span class="title">Customer</span>&gt; <span class="keyword">implements</span> <span class="title">CustomerDAO</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDAO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取当前BaseDAO的子类继承的父类中的泛型</span></span><br><span class="line">        Type genericSuperclass = <span class="keyword">this</span>.getClass().getGenericSuperclass();</span><br><span class="line">        ParameterizedType parameterizedType = (ParameterizedType) genericSuperclass;</span><br><span class="line">        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();<span class="comment">//获取了父类的泛型参数</span></span><br><span class="line">        clazz = (Class&lt;T&gt;) actualTypeArguments[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//通用的增删改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection connection, String sql, Object ...args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Connection connection = null ;</span></span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.连接数据库</span></span><br><span class="line"><span class="comment">//            connection = JDBC.getConnection1();</span></span><br><span class="line">            <span class="comment">//2.预编译的SQL语句，返回PreparedStatement实例</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//3.填充占位符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i + <span class="number">1</span>,args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.执行</span></span><br><span class="line">            preparedStatement.execute();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.关闭资源</span></span><br><span class="line">            JDBC.closeResource1(<span class="keyword">null</span>,preparedStatement,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通用查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  List&lt;T&gt; <span class="title">query2</span><span class="params">(Connection connection, String sql, Object...args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Connection connection = null;</span></span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            connection = JDBC.getConnection1();</span></span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length; i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="comment">//获取结果集的数据元</span></span><br><span class="line">            ResultSetMetaData resultSetMetaData = resultSet.getMetaData();</span><br><span class="line">            <span class="comment">//获取结果集的列数</span></span><br><span class="line">            <span class="keyword">int</span> columnCount = resultSetMetaData.getColumnCount();</span><br><span class="line">            <span class="comment">//创建集合对象</span></span><br><span class="line">            ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                T t = clazz.newInstance();</span><br><span class="line">                <span class="comment">//处理结果集数据中的每一个列：给t对象指定的属性赋值</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; columnCount;i++) &#123;</span><br><span class="line">                    <span class="comment">//获取列值</span></span><br><span class="line">                    Object columvalue = resultSet.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//获取某个列的列名</span></span><br><span class="line">                    String columnName = resultSetMetaData.getColumnName(i+<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//给customer对象指定的某个属性，赋值为value</span></span><br><span class="line">                    <span class="comment">//给customer对象指定的columnName属性，赋值为columvalues,通过反射</span></span><br><span class="line">                    Field field = clazz.getDeclaredField(columnName);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    field.set(t,columvalue);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBC.closeResource1(connection,preparedStatement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用特殊值查询</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getValue</span><span class="params">(Connection connection,String sql,Object...args)</span>  </span>&#123;</span><br><span class="line">        PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;args.length;i++)&#123;</span><br><span class="line">                preparedStatement.setObject(i + <span class="number">1</span>,args[i]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            resultSet = preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">if</span> (resultSet.next())&#123;</span><br><span class="line">                <span class="keyword">return</span> (E) resultSet.getObject(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBC.closeResource1(<span class="keyword">null</span>,preparedStatement,resultSet);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-7-数据库连接池"><a href="#1-7-数据库连接池" class="headerlink" title="1.7 数据库连接池"></a>1.7 数据库连接池</h2><h3 id="1-7-1-德鲁伊（druid）"><a href="#1-7-1-德鲁伊（druid）" class="headerlink" title="1.7.1 德鲁伊（druid）"></a>1.7.1 德鲁伊（druid）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource source;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">            InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">"druid"</span>);</span><br><span class="line">            pros.load(is);</span><br><span class="line">            source = DruidDataSourceFactory.createDataSource(pros);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = source.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-8-DBUtils"><a href="#1-8-DBUtils" class="headerlink" title="1.8 DBUtils"></a>1.8 DBUtils</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbutils/commons-dbutils --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-1-增删改"><a href="#1-8-1-增删改" class="headerlink" title="1.8.1 增删改"></a>1.8.1 增删改</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryRunner</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">           connection = DruidTest.getConnection();</span><br><span class="line">           String sql = <span class="string">"insert into customers(id,name ,email ,birth)values(?,?,?,?)"</span>;</span><br><span class="line">           <span class="keyword">int</span> insertCount = runner.update(connection, sql, <span class="string">"6"</span>,<span class="string">"蔡徐坤"</span>, <span class="string">"caixukun@qq.com"</span>, <span class="string">"1997-01-01"</span>);</span><br><span class="line">           System.out.println(<span class="string">"添加了"</span>+insertCount+<span class="string">"条数据"</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JDBC.closeResource1(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-2-查询（返回一条记录）"><a href="#1-8-2-查询（返回一条记录）" class="headerlink" title="1.8.2 查询（返回一条记录）"></a>1.8.2 查询（返回一条记录）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">           connection = DruidTest.getConnection();</span><br><span class="line">           String sql = <span class="string">"select id,name,email from customers where id = ?"</span>;</span><br><span class="line">           BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           Customer customer = runner.query(connection, sql, handler, <span class="number">5</span>);</span><br><span class="line">           System.out.println(customer);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JDBC.closeResource1(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BeanHandler：是ResultBeanHandler接口的实现类，用于封装表中的一条记录</li>
</ul>
<h3 id="1-8-3-查询（返回多条记录）"><a href="#1-8-3-查询（返回多条记录）" class="headerlink" title="1.8.3 查询（返回多条记录）"></a>1.8.3 查询（返回多条记录）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">           connection = DruidTest.getConnection();</span><br><span class="line">           String sql = <span class="string">"select id,name,email from customers where id &lt; ?"</span>;</span><br><span class="line">           BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">           List&lt;Customer&gt; list = runner.query(connection, sql, handler, <span class="number">5</span>);</span><br><span class="line">           list.forEach(System.out::println);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JDBC.closeResource1(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-4-查询（特殊返回值）"><a href="#1-8-4-查询（特殊返回值）" class="headerlink" title="1.8.4 查询（特殊返回值）"></a>1.8.4 查询（特殊返回值）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Connection connection = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">           connection = DruidTest.getConnection();</span><br><span class="line">           String sql = <span class="string">"select count(*) from customers"</span>;</span><br><span class="line">           ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">           Long count = (Long) runner.query(connection, sql, handler);</span><br><span class="line">           System.out.println(count);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           JDBC.closeResource1(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8-5-关闭资源"><a href="#1-8-5-关闭资源" class="headerlink" title="1.8.5 关闭资源"></a>1.8.5 关闭资源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResources</span><span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> </span>&#123;</span><br><span class="line">       DbUtils.closeQuietly(connection);</span><br><span class="line">       DbUtils.closeQuietly(statement);</span><br><span class="line">       DbUtils.closeQuietly(resultSet);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据库</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
